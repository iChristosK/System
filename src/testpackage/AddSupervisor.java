/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package testpackage;

import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import com.sun.xml.internal.ws.policy.privateutil.PolicyUtils.Commons;
import java.awt.*;
import java.awt.event.*;
import java.util.Vector;
import javax.swing.*;
import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultEditorKit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import net.proteanit.sql.DbUtils;


import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Christos
 */
public class AddSupervisor extends javax.swing.JFrame {
    
      
    static Vector headers = new Vector();
    static DefaultTableModel model = null;
    static Vector data = new 
    Vector();
 
    static int tableWidth = 0; // set the tableWidth 
    static int tableHeight = 0;
        private TableRowSorter<TableModel> sorter;
        
    
   
 
 
public class User {
   
    
    private int id;
    private String firstName;
   
    
    public User(int ID, String FirstName)
    {
        this.id = ID;
        this.firstName = FirstName;
      
    }

   
    public int getId()
    {
        return id;
    }
    
    public String getFirstName()
    {
        return firstName;
    }
    
   
}


private void filter(String text)
{
    RowFilter<TableModel, Object> rf = null;
    try {
        rf = RowFilter.regexFilter(text, 0);
    } catch (java.util.regex.PatternSyntaxException ee) {
        return;
    }
    sorter.setRowFilter(rf);
    jTable2.setRowSorter(sorter);
}
    
    public Connection getConnection()
   {
       Connection con;

       try {
           con = DriverManager.getConnection("jdbc:mysql://localhost/kios", "root","9667");
           return con;
       } 
      catch (Exception e) {
           e.printStackTrace();
           return null;
       }
   }
    
    
public ArrayList<User> getUsersList()
   {
       ArrayList<User> usersList = new ArrayList<User>();
       Connection connection = getConnection();
       
       String query = "SELECT * FROM  `supervisors` ";
       Statement st;
       ResultSet rs;
       
       try {
           st = connection.createStatement();
           rs = st.executeQuery(query);

           User user;

           while(rs.next())
           {
user = new User(rs.getInt("ID"),rs.getString("FullName"));
               usersList.add(user);
           }

       } 
      catch (Exception e) {
           e.printStackTrace();
       }
       return usersList;
   }


   public void Show_Users_In_JTable()
   {
       ArrayList<User> list = getUsersList();
       DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
       jTable2.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
       Object[] row = new Object[2];
       for(int i = 0; i < list.size(); i++)
       {
           row[0] = list.get(i).getId();
           row[1] = list.get(i).getFirstName();
         
           model.addRow(row);
       }
    }
/*
public void showItem(int index)
    {
        jTextField1.setText(UsersList(index).getId());

        jTextField2.setText(UsersList().get(index).getName());
    }*/
public void executeSQlQuery(String query, String message)
   {
       Connection con = getConnection();
       Statement st;
       try{
           st = con.createStatement();
           if((st.executeUpdate(query)) == 1)
           {
               // refresh jtable data
               DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
               model.setRowCount(0);
               Show_Users_In_JTable();
               
               JOptionPane.showMessageDialog(null, "Data "+message+" Succefully");
           }else{
               JOptionPane.showMessageDialog(null, "Data Not "+message);
           }
       }catch(Exception ex){
           ex.printStackTrace();
       }
   }
    /**
     * Creates new form AddSupervisor
     */
    public AddSupervisor() {
        
        initComponents();
        Show_Users_In_JTable();
       // set();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kiosPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("kiosPU").createEntityManager();
        supervisorsQuery = java.beans.Beans.isDesignTime() ? null : kiosPUEntityManager.createQuery("SELECT s FROM Supervisors s");
        supervisorsList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : supervisorsQuery.getResultList();
        jMenu1 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jFileChooser1 = new javax.swing.JFileChooser();
        jButton9 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jButtonSearch = new javax.swing.JButton();
        jTextFieldSearch = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        jMenu4.setText("jMenu4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton1.setBackground(new java.awt.Color(255, 204, 153));
        jButton1.setFont(new java.awt.Font("Helvetica", 1, 16)); // NOI18N
        jButton1.setText("Delete");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jLabel2.setText("ID for Supervisor:");

        jButton2.setBackground(new java.awt.Color(255, 204, 153));
        jButton2.setFont(new java.awt.Font("Helvetica", 1, 16)); // NOI18N
        jButton2.setText("Add");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 204, 153));
        jButton3.setFont(new java.awt.Font("Helvetica", 1, 16)); // NOI18N
        jButton3.setText("Export");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField2MouseClicked(evt);
            }
        });
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 204, 153));
        jButton4.setFont(new java.awt.Font("Helvetica", 1, 16)); // NOI18N
        jButton4.setText("Import");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(255, 204, 153));
        jButton9.setFont(new java.awt.Font("Helvetica", 1, 16)); // NOI18N
        jButton9.setText("Back");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 204, 153));
        jButton5.setFont(new java.awt.Font("Helvetica", 1, 16)); // NOI18N
        jButton5.setText("Save");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Full Name"
            }
        ));
        jTable2.setColumnSelectionAllowed(true);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable2MousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        jTable2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jLabel3.setText("Full Name of Supervisor:");

        jButtonSearch.setBackground(new java.awt.Color(255, 204, 153));
        jButtonSearch.setFont(new java.awt.Font("Helvetica", 1, 16)); // NOI18N
        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jTextFieldSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldSearchMouseClicked(evt);
            }
        });
        jTextFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchActionPerformed(evt);
            }
        });
        jTextFieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldSearchKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1115, 1115, 1115)
                        .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(15, 15, 15)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                                        .addComponent(jTextField2)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                            .addComponent(jTextField1))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGap(379, 379, 379)
                                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton7.setBackground(new java.awt.Color(255, 255, 255));
        jButton7.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 153, 0));
        jButton7.setText("Supervisors");
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(534, 534, 534)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(250, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jMenu2.setText("File");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Cut");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Paste");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    
    
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:

        // TODO add your handling code here:

        dispose();//To close the current window

        Menu closeCurrentWindow = new Menu();
        closeCurrentWindow.setVisible(true);//Open the new window

    }//GEN-LAST:event_jButton9ActionPerformed

    

    public void removeSelectedFromTable(JTable from)
{
    
    DefaultTableModel tm = (DefaultTableModel) from.getModel();
    // jTable2.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    
     int[] rows = from.getSelectedRows();
  System.out.println("seeldted rows :" + from.getSelectedRows());
   System.out.println("ROW LENGTH :" + rows.length);
            if(rows.length == 0){
                JOptionPane.showMessageDialog(null, "No records are selected");
            }else if(JOptionPane.showConfirmDialog(null, "Are you sure you want to permanently delete " +
                        rows.length + " selected record(s)") == 0){
                        
               
                    for(int i = 0; i < rows.length; i++){
                    //System.out.println("Value at " + rows[i] + ": " + from.getValueAt(rows[i], 0));
                    //System.out.println("Converted Value Value at " + rows[i] + ": " + from.convertRowIndexToModel(rows[i]));

                     String query2 = "UPDATE `researchers` SET fk_Supervisor = 1 WHERE fk_Supervisor = ('"+from.getValueAt(rows[i], 0)+"')";
                    
                   executeSQlQuery(query2, "Updated from Researchers Table");
                   
                     String query1 = "UPDATE `project` SET Project_super = 1 WHERE Project_super = ('"+from.getValueAt(rows[i], 0)+"')";
                     
                     
                   executeSQlQuery(query1, "Updated from Project Table");
                   
                   String query = "DELETE FROM `supervisors` WHERE ID = ('"+from.getValueAt(rows[i], 0)+"')";
                    executeSQlQuery(query, "Deleted Supervisors Table"); 
                    
    
                    
                }
                    String query2 = "UPDATE `researchers` SET fk_Supervisor = 1 WHERE fk_Supervisor = ('"+from.getValueAt(rows[0], 0)+"')";
                    
                   executeSQlQuery(query2, "Updated from Researchers Table");
                   
                     String query1 = "UPDATE `project` SET Project_super = 1 WHERE Project_super = ('"+from.getValueAt(rows[0], 0)+"')";
                     
                     
                   executeSQlQuery(query1, "Updated from Project Table");
                   
                   String query = "DELETE FROM `supervisors` WHERE ID = ('"+from.getValueAt(rows[0], 0)+"')";
                    executeSQlQuery(query, "Deleted Supervisors Table"); 
            }
           
}

                
                // while(rows.length>0) {
                   // for (int i =0; i <rows.length; i++){
                        // for (int i =rows.length; i < 0 ; i--)
                        /*  for(int i = 0; i < rows.length; i++){
                {
                  
                    String query = "DELETE FROM `supervisors` WHERE ID = ('"+from.convertRowIndexToModel(rows[i])+"')";
                     executeSQlQuery(query, "Deleted");
                     System.out.println("AAAAAAA DELETED  Value at " + rows[i] + ": " + from.convertRowIndexToModel(rows[i]));
                     
                     */
                    // String query = "DELETE FROM `supervisors` WHERE ID = ('"+from.convertRowIndexToModel(rows[i])+"')";
                    
                    /*
                     
                     do {
                ((DefaultTableModel) jTable2.getModel()).removeRow(jTable2.getSelectedRows()[0]);
                String query = "DELETE FROM `supervisors` WHERE ID = ('"+from.getSelectedRows()[i]+"')";
                     executeSQlQuery(query, "Deleted"); 
                     
                } while (jTable2.getSelectedRowCount() > 0);
                    // tm.removeRow(from.convertRowIndexToModel(rows[i]));
                     
  
                         
                             
                             }
                        from.clearSelection();
                    }
            }*/

                
                 // int[] rows = from.getSelectedRows();
        //DefaultTableModel tm = (DefaultTableModel) from.getModel();
        /*
        for (int i = rows.length-1; i >= 0; i--) {
           // tm.removeRow(rows[i]);
            System.out.println("KALAN Value at " + rows[i] + ": " + from.convertRowIndexToModel(rows[i]));
            String query = "DELETE FROM `supervisors` WHERE ID = ('"+from.convertRowIndexToModel(rows[i])+"')";
                     executeSQlQuery(query, "Deleted");
                    // tm.removeRow(rows[i]);
            }
          }
        }
                
                
                
                
                
                
                
                //for(int i = 1; i < rows.length; i++){
                 //   System.out.println("Current Row ("+ i +"): " + rows[i]);
                 //  rows[i] = from.convertRowIndexToModel(rows[i]);
                  //tm.removeRow(rows[i]);
                    
                    // tm.removeRow(rows[i]);
                    
                    // String query = "DELETE FROM `supervisors` WHERE ID = ('"+from.convertRowIndexToModel(rows[i])+"')";
                     //String query = "DELETE FROM `supervisors` WHERE ID = ('"+rows[i]+"') ";
                    // String query = "DELETE FROM `supervisors` WHERE ID = ('"+rows[i]+"')";
                    
                  // executeSQlQuery(query, "Deleted");
                  // tm.removeRow(rows[i]);
                      
                
                
                     */
                            
    
    
    
   

    
                        /*
    while(rows.length>0)
        {
       // ((DefaultTableModel)tm).removeRow(from.convertRowIndexToModel(rows[0]));

        rows = from.getSelectedRows();
        String query = "DELETE FROM `supervisors` WHERE ID = ('"+from.convertRowIndexToModel(rows[0])+"')";
         executeSQlQuery(query, "Deleted");
         }
    from.clearSelection();
            }
}*/
    
    
    
    
   // int[] rows = from.getSelectedRows();
      //  DefaultTableModel tm = (DefaultTableModel) from.getModel();
       // for (int i = rows.length-1; i >= 0; i--) {
       //     tm.removeRow(rows[i]);
            
            
           // String query = "DELETE FROM `supervisors` WHERE ID = ('"+rows[i]+"')";
            // executeSQlQuery(query, "Deleted");
                //   }
            //}

        
   

    
 
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

      // removeSelectedFromTable(jTable2);
      
      
       
        
               String query = "DELETE FROM `supervisors` WHERE ID = ('"+jTextField1.getText()+"')";
        executeSQlQuery(query, "Deleted");
        
        
  //  }
        
        
       // deleterow();
       
       
       //Working deletion
       
       
                    /*
                     String query2 = "DELETE FROM `researchers` WHERE fk_Supervisor = ('"+row+"')";
                   executeSQlQuery(query2, "Deleting NOW");
                   
                     String query1 = "DELETE FROM `project` WHERE Project_super = ('"+row+"')";
                   executeSQlQuery(query1, "Deleting NOW");
                   
                    String query = "DELETE FROM `supervisors` WHERE ID = ('"+row+"')";
                    executeSQlQuery(query, "Deleted");*/
                    
                    
                    /*
         DefaultTableModel from = (DefaultTableModel)jTable2.getModel();
                int row = jTable2.getSelectedRow();

                while (row != -1)
                {
                    
                    int modelRow = jTable2.convertRowIndexToModel( row );
                     String query2 = "UPDATE `researchers` SET fk_Supervisor = 1 WHERE fk_Supervisor = ('"+row+"') ";
                    
                   executeSQlQuery(query2, "Updated from Researchers Table");
                   
                     String query1 = "UPDATE `project` SET Project_super = 1 WHERE Project_super = ('"+row+"')";
                     
                     
                   executeSQlQuery(query1, "Updated from Project Table");
                   
                   String query = "DELETE FROM `supervisors` WHERE ID = ('"+row+"')";
                    executeSQlQuery(query, "Deleted Supervisors Table"); 
                    
                    model.removeRow( modelRow );
                    //row = jTable2.getSelectedRow();
                    
                   
                    
                }*/
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    
    
       //this is a function where the 
     private static void outputResultSet(ResultSet rs) throws Exception {
    ResultSetMetaData rsMetaData = rs.getMetaData();
    int numberOfColumns = rsMetaData.getColumnCount();
    for (int i = 1; i < numberOfColumns + 1; i++) {
      String columnName = rsMetaData.getColumnName(i);
      System.out.print(columnName + "   ");

    }
    System.out.println();
    System.out.println("----------------------");

    while (rs.next()) {
      for (int i = 1; i < numberOfColumns + 1; i++) {
        System.out.print(rs.getString(i) + "   ");
      }
      System.out.println();
    }

  }
     
     
     public static void checkUpdateCounts(int[] updateCounts) {
    for (int i=0; i<updateCounts.length; i++) {
        if (updateCounts[i] >= 0) {
            System.out.println("OK; updateCount="+updateCounts[i]);
        }
        else if (updateCounts[i] == Statement.SUCCESS_NO_INFO) {
            System.out.println("OK; updateCount=Statement.SUCCESS_NO_INFO");
        }
        else if (updateCounts[i] == Statement.EXECUTE_FAILED) {
            System.out.println("Failure; updateCount=Statement.EXECUTE_FAILED");
        }
    }
}  
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         
        
        if (jTextField1.getText().equals("") || jTextField2.getText().equals("")) {
            //  jButton1.setEnabled(true);
           JOptionPane.showMessageDialog(null, "Add required fields", "InfoBox: " + "Warning!", JOptionPane.INFORMATION_MESSAGE); 
          
                } 
        
        else {
            String query = "INSERT INTO `supervisors`(`ID`,`FullName`) VALUES ('"+jTextField1.getText()+"','"+jTextField2.getText()+"')";
        
            executeSQlQuery(query, "Inserted");
        }

        //FOUND A CODE WHERE YOU ARE ABLE TO ADD MANY ROWS IN DATABASE FASTER
        
        
        
          //DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
          // jTable2.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
          
          
          // HOW TO ADD SELECTED VALUES OF JTABLE TO DATABASE CLICKING A BUTTON
          
          /* WORKING
          int[] selectedRow = jTable2.getSelectedRows();
          for(int j=0; j<selectedRow.length; j++){
      
                  
                     String query = "INSERT INTO `supervisors`(`ID`,`FullName`) VALUES ('"+jTextField1.getText()+"','"+jTextField2.getText()+"')";
                                         
                     executeSQlQuery(query, "Inserted");
                         }

          /*
             int[] selection = table.getSelectedRows();
             for (int i = 0; i < selection.length; i++) {
             selection[i] = table.convertRowIndexToModel(selection[i]);
           }*/        
          
          
          
          
          
          
          // EXAMPLE ON HOW TO INSERT DATA WITH BATCH, CURRENTLY NOT WORKING
           
          
          /*
                     Connection con = getConnection();
        try {
            con.setAutoCommit(false);
        } catch (SQLException ex) {
            Logger.getLogger(AddSupervisor.class.getName()).log(Level.SEVERE, null, ex);
        }
                     Statement st = con.createStatement();
                     outputResultSet(st);
        
    
                         //st.executeUpdate("create table survey (id int, name VARCHAR(30) );");
    
                        String INSERT_RECORD = "INSERT INTO `supervisors`(`ID`,`FullName`) VALUES ('"+jTextField1.getText()+"','"+jTextField2.getText()+"')";
    
                        PreparedStatement pstmt = con.prepareStatement(INSERT_RECORD);
                       // pstmt.setString(1, "1");
                        //pstmt.setString(2, "name1");
                        pstmt.addBatch();
    
                        //pstmt.setString(1, "2");
                        pstmt.setString(2, "name2");
                        pstmt.addBatch();
    
                        // execute the batch
                            int[] updateCounts = pstmt.executeBatch();

                        checkUpdateCounts(updateCounts);

                        // since there were no errors, commit
                        con.commit();
    
                         ResultSet rs = st.executeQuery("SELECT * FROM supervisors");
                          outputResultSet(rs);

    
                             rs.close();
                            st.close();
                             con.close();
          */
    
    }//GEN-LAST:event_jButton2ActionPerformed


     
     
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        
         JFileChooser jf = new JFileChooser();
        jf.setDialogTitle("Please select the .XLS (Excel File) where you want to EXPORT the data:");
       int result =  jf.showOpenDialog(null);
       if(result == JFileChooser.APPROVE_OPTION){
       String filename = jf.getSelectedFile().getName();
        String path = jf.getSelectedFile().getParentFile().getPath();

        int len = filename.length();
        String ext = "";
        String file = "";

        if(len > 4){
            ext = filename.substring(len-4, len);
        }

        if(ext.equals(".xls")){
            file = path + "/" + filename; 
        }else{
            file = path + "/" + filename + ".xls"; 
        }
        toExcel(jTable2, new File(file));
    }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    
    
    public void toExcel(JTable table, File file){
		try{
			TableModel model = table.getModel();
			FileWriter excel = new FileWriter(file);

			for(int i = 0; i < model.getColumnCount(); i++){
				excel.write(model.getColumnName(i) + "\t");
			}

			excel.write("\n");

			for(int i=0; i< model.getRowCount(); i++) {
				for(int j=0; j < model.getColumnCount(); j++) {
					excel.write(model.getValueAt(i,j).toString()+"\t");
				}
				excel.write("\n");
			}

			excel.close();
		}catch(IOException e){ System.out.println(e); }
	}
    
    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    
  
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
      
        
        //add to existing data in jTable without replacing the old data
        
                int dialogButton = JOptionPane.YES_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog (null, "Would You Like to export the current data first?","Warning",dialogButton);
                 if(dialogResult == JOptionPane.YES_OPTION){
                     
                     
                 JFileChooser jf = new JFileChooser();
                 jf.setDialogTitle("Please select the .XLS (Excel File) where you want to EXPORT the data:");
                 int result =  jf.showOpenDialog(null);
                 if(result == JFileChooser.APPROVE_OPTION){
                     String filename = jf.getSelectedFile().getName();
                    String path = jf.getSelectedFile().getParentFile().getPath();

                    int len = filename.length();
                    String ext = "";
                    String file = "";

                      if(len > 4){
                         ext = filename.substring(len-4, len);
                             }

                            if(ext.equals(".xls")){
                             file = path + "/" + filename; 
                              }else{
                              file = path + "/" + filename + ".xls"; 
                               }
                             toExcel(jTable2, new File(file));
                                }
                
                                      }
       
                        int dialogButton2 = JOptionPane.YES_NO_OPTION;
                        int dialogResult2 = JOptionPane.showConfirmDialog(this, "Would you like to import", "Importing .xls file", dialogButton2);
                    if(dialogResult2 == 0) {
                  System.out.println("Yes option");
  
  
                  int dialogButton3 = JOptionPane.YES_NO_OPTION;
                  int dialogResult3 = JOptionPane.showConfirmDialog(this, "Would you like to replace the current data", "Importing .xls file", dialogButton3);
                    if(dialogResult3 == 0) {
                     System.out.println("Yes option");
                     //new code 
                     
   
                     
                  
                     // String query0 =  "ALTER `supervisors` SET FOREIGN KEY(0) REFERENCES root";
                     /*
                              String query0 =  "ALTER `supervisors` SET FOREIGN_KEY_CHECKS = 0";
                       
                       executeSQlQuery(query0, "All KEYS");

                          String query001 = " TRUNCATE `supervisors`";
                       executeSQlQuery(query001, "All Data removed from supervisors");
                       
                       
                       String query01 =  "ALTER TABLE `supervisors` SET FOREIGN_KEY_CHECKS (1)"; 
                       executeSQlQuery(query01, "All KEYS");
                       */
                       
                       /*
                        String query01 = "`supervisors` SET FOREIGN_KEY_CHECKS = 1;";
                       executeSQlQuery(query01, "All KEYS SET BACK");*/
                     
                      
                    jTable2.removeAll();
                     model.setRowCount(0);

                        //correct code
                        jFileChooser1.showOpenDialog(null);
                          File file = jFileChooser1.getSelectedFile();
                            if(!file.getName().endsWith("xls")){
                              JOptionPane.showMessageDialog(null,"Please select only Excel file.",
                               "Error",JOptionPane.ERROR_MESSAGE);
                              
                              
    

                                      }
                                else
                                 {
                                fillData(file);
                                model = new DefaultTableModel(data,headers);
                                tableWidth = model.getColumnCount() *150;
                                 tableHeight = model.getRowCount() *25;
                                 jTable2.setPreferredSize( new Dimension (tableWidth,tableHeight));
                                   }
                                     jTable2.setModel(model);
                                        } else 
                                           {
                                          System.out.println("Not Replacing! Adding to the existing data");
                                            //Here the code to add to the existing data
                                             //Actually you need to append or concatenate to the existing data
            
                                         jFileChooser1.showOpenDialog(null);
                                         File file = jFileChooser1.getSelectedFile();
                                        if(!file.getName().endsWith("xls")){
                                        JOptionPane.showMessageDialog(null,"Please select only Excel file.",
                                         "Error",JOptionPane.ERROR_MESSAGE);
    

                                         }
                                      else
                                             {
                                             AppendData(file);
                                                // fillData(file);
                                             //The edited code where the data are going to be appended
                                                model = new DefaultTableModel(data,headers);
                                                tableWidth = model.getColumnCount() *150;
                                                  tableHeight = model.getRowCount() *25;
                                                    jTable2.setPreferredSize( new Dimension (tableWidth,tableHeight));
                                                      }
                                                        jTable2.setModel(model);
            
            
         
                                                         } 
                                                     }
                                                }

    
    void fillData(File file)
    {
        Workbook workbook = null;
        try {
            try {
                workbook = Workbook.getWorkbook(file);
            }  catch(IOException ex){
                Logger.getLogger(AddSupervisor.class.getName()).log(Level.SEVERE,null,ex);
            }
            Sheet sheet = workbook.getSheet(0);
            
            headers.clear();
            for ( int i=0; i<sheet.getColumns(); i++){
                Cell cell1 = sheet.getCell(i,0);
                headers.add(cell1.getContents());
            }
            data.clear();
             for (int j = 1; j < sheet.getRows(); j++) { 
                Vector d = new Vector();
            
            for (int i = 0; i < sheet.getColumns(); i++) { 
                Cell cell = sheet.getCell(i, j);
            
            d.add(cell.getContents());


        }
       d.add("\n");
        data.add(d);
                }
                 }
                    catch (BiffException e) {
                    e.printStackTrace();
                    }
    
        
    }//GEN-LAST:event_jButton4ActionPerformed

    
    /*
    void AppendData(File file)
    {
        Workbook workbook = null;
        try {
            try {
                workbook = Workbook.getWorkbook(file);
            }  catch(IOException ex){
                Logger.getLogger(AddSupervisor.class.getName()).log(Level.SEVERE,null,ex);
            }
            Sheet sheet = workbook.getSheet(0);
            
          // headers.clear();
            for ( int i=0; i<sheet.getColumns(); i++){
                Cell cell1 = sheet.getCell(i,0);
                headers.add(cell1.getContents());
            }
          // data.clear();
             for (int j = 1; j < sheet.getRows(); j++) { 
                Vector d = new Vector();
            
            for (int i = 0; i < sheet.getColumns(); i++) { 
                Cell cell = sheet.getCell(i, j);
            
            d.add(cell.getContents());


        }
       d.add("\n");
        data.add(d);
                }
                 }
                    catch (BiffException e) {
                    e.printStackTrace();
                    }
    
    }*/
    
    //alternative way of exporting table
    public void exportTable(JTable table, File file) throws IOException {
        TableModel model = table.getModel();
        FileWriter out = new FileWriter(file);
        String groupExport = "";
        for (int i = 0; i < (model.getColumnCount()); i++) {//* disable export from TableHeaders
            groupExport = String.valueOf(model.getColumnName(i));
            out.write(String.valueOf(groupExport) + "\t");
        }
        out.write("\n");
        for (int i = 0; i < model.getRowCount(); i++) {
            for (int j = 0; j < (model.getColumnCount()); j++) {
                if (model.getValueAt(i, j) == null) {
                    out.write("null" + "\t");
                } else {
                    groupExport = String.valueOf(model.getValueAt(i, j));
                    out.write(String.valueOf(groupExport) + "\t");
                }
            }
            out.write("\n");
        }
        }
    
    void AppendData(File file ){
        try {
jxl.Workbook workbook = jxl.Workbook.getWorkbook(file);
jxl.Sheet sheet = workbook.getSheet(0);
headers.clear();
for (int i = 0; i < sheet.getColumns(); i++) {
jxl.Cell cell1 = sheet.getCell(i, 0);
headers.add(cell1.getContents());
}
data.clear();
for (int j = 1; j < sheet.getRows(); j++) {
Vector d = new Vector();
for (int i = 0; i < sheet.getColumns(); i++) {
jxl.Cell cell = sheet.getCell(i, j);
d.add(cell.getContents());
}
d.add("\n");
data.add(d);
}
}
catch (Exception e) {
e.printStackTrace();
}
    }
    
    
                                 
    
       
       public void set()
{
      try
        {
                 
     
           Class.forName("com.mysql.jdbc.Driver");
            java.sql.Connection con=DriverManager.getConnection("jdbc:mysql://localhost:3305/kios","root","9667");
    String sql="select * from supervisors";
    java.sql.PreparedStatement pst=con.prepareStatement(sql);
  
    ResultSet rs = pst.executeQuery(sql);
   jTable2.setModel(DbUtils.resultSetToTableModel(rs));
   

con.close();
pst.close();
        }
        catch(Exception e)
        {
          //  JOptionPane.showMessageDialog(null, e);
        }
}
    
                               
 

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

/*
       String query = "UPDATE `supervisors` SET `FullName`='"+jTextField2.getText()+"' WHERE `ID` = "+jTextField1.getText();
       executeSQlQuery(query, "Updated");
             */



int rows = jTable2.getRowCount();

System.out.println(""+rows);
for(int row = 0; row<rows ; row++)
{

String id = (String) jTable2.getValueAt(row, 0);
String name = (String) jTable2.getValueAt(row, 1);


 try{
  Class.forName("com.mysql.jdbc.Driver");
    java.sql.Connection con=DriverManager.getConnection("jdbc:mysql://localhost/kios","root","9667");


  String query = "insert into supervisors (ID,FullName) values(?,?)" ;


 PreparedStatement stmt = con.prepareStatement(query);
 stmt.setString(1, id); //Invoice No
 stmt.setString(2, name); //Code



 stmt.addBatch();
stmt.executeBatch();
con.commit();
 }

 catch(Exception ex)
 {
  //JOptionPane.showMessageDialog(null, "Cannot save. "+ ex);
    }    
}

set();
         

    }//GEN-LAST:event_jButton5ActionPerformed
private void setMappings(JList list) { 
        ActionMap map = list.getActionMap();
        map.put(TransferHandler.getCutAction().getValue(Action.NAME),
                TransferHandler.getCutAction());
        map.put(TransferHandler.getCopyAction().getValue(Action.NAME),
                TransferHandler.getCopyAction());
        map.put(TransferHandler.getPasteAction().getValue(Action.NAME),
                TransferHandler.getPasteAction());
}


public JMenuBar createMenuBar () {
        JMenuItem menuItem = null;
        JMenuBar menuBar = new JMenuBar();
        JMenu mainMenu = new JMenu("Edit");
        mainMenu.setMnemonic(KeyEvent.VK_E);

        menuItem = new JMenuItem(new DefaultEditorKit.CutAction());
        menuItem.setText("Cut");
        menuItem.setMnemonic(KeyEvent.VK_T);
        mainMenu.add(menuItem);

        menuItem = new JMenuItem(new DefaultEditorKit.CopyAction());
        menuItem.setText("Copy");
        menuItem.setMnemonic(KeyEvent.VK_C);
        mainMenu.add(menuItem);

        menuItem = new JMenuItem(new DefaultEditorKit.PasteAction());
        menuItem.setText("Paste");
        menuItem.setMnemonic(KeyEvent.VK_P);
        mainMenu.add(menuItem);

        menuBar.add(mainMenu);
        return menuBar;
    }

    
    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        
          // Get The Index Of The Slected Row 
        int i = jTable2.getSelectedRow();

        TableModel model = jTable2.getModel();
        
         // Display Slected Row In JTexteFields
        jTextField1.setText(model.getValueAt(i,0).toString());

        jTextField2.setText(model.getValueAt(i,1).toString());
    
    }//GEN-LAST:event_jTable2MouseClicked

    private void jTable2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MousePressed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_jTable2MousePressed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        TransferHandler.getCopyAction();
        
        
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jTextField2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField2MouseClicked
        // TODO add your handling code here:
        
       
    }//GEN-LAST:event_jTextField2MouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        
         TransferHandler.getPasteAction();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        // TODO add your handling code here:
        /*
        if (!jTextField1.getText().equals("")) {
            jButton2.setEnabled(true);
} else {
            jButton2.setEnabled(false);
}*/
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        // TODO add your handling code here:
        /*
        
        if (!jTextField2.getText().equals("")) {
            jButton2.setEnabled(true);
} else {
            jButton2.setEnabled(false);
}*/
    }//GEN-LAST:event_jTextField2KeyTyped

    
    public void searchTableContents(String searchString) { /*   
 // DefaultTableModel currtableModel = (DefaultTableModel) jTable2.getModel();
    //To empty the table before search
    model.setRowCount(0);
    int rows[] = model.setRowCount(jTable2.getLength);
    //To search for contents from original table content
    for (Object rows : data )
        Vector rowVector = (Vector) rows;
        for (Object column : rowVector) {
            if (column.toString().contains(searchString)) {
                //content found so adding to table
                model.addRow(rowVector);
                break;
            }
        

        } */
}
        
    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // TODO add your handling code here:
        
      
        
       // Commons.attachJTableFilter(jTable2, jTextFieldSearch);
        
        // jTable2.removeAll();  
         // model.getRowCount();
       for(int i = 0; i < jTable2.getRowCount(); i++){ //For each row
        for(int j = 0; j < jTable2.getColumnCount(); j++){ //For each column in that row
           // if(jTable2.getModel().getValueAt(i, j).equals("Elias Kyriakides")){//Search the model
           if(jTable2.getModel().getValueAt(i, j).equals(jTextFieldSearch.getText())){  //Search the model

                 JOptionPane.showMessageDialog(null, "Found "+ jTable2.getModel().getValueAt(i, j), "InfoBox: " + "Warning!", JOptionPane.INFORMATION_MESSAGE);
                 //Vector rowVector = (Vector) i;
                  
                 // model.addRow(data);
                 break;
        }   //For loop inner
         /*  else
           {
              JOptionPane.showMessageDialog(null, "Not Found ","InfoBox: " + "Warning!", JOptionPane.INFORMATION_MESSAGE);
              
             break;
           }*/
        
           
        }   //For loop outer
      
        
       }
       
        
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jTextFieldSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldSearchMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSearchMouseClicked

    private void jTextFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSearchActionPerformed

    private void jTextFieldSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSearchKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddSupervisor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddSupervisor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddSupervisor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddSupervisor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddSupervisor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextFieldSearch;
    private javax.persistence.EntityManager kiosPUEntityManager;
    private java.util.List<testpackage.Supervisors> supervisorsList;
    private javax.persistence.Query supervisorsQuery;
    // End of variables declaration//GEN-END:variables
}
